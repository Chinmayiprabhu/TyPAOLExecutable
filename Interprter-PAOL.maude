load dataTypes

view Vid from TRIV to DATA is
   sort Elt to Vid .
endv

view Data from TRIV to DATA is
   sort Elt to Data .
endv

view Expr from TRIV to DATA is
   sort Elt to Expr .
endv

view Uid from TRIV to DATA is
   sort Elt to Uid .
endv

view Entity from TRIV to DATA is
  sort Elt to Entity .
endv


view Purpose from TRIV to DATA is
  sort Elt to Purpose .
endv


view Action from TRIV to DATA is
  sort Elt to Action .
endv

view Policy from TRIV to DATA is
  sort Elt to Policy .
endv

view Tags from TRIV to DATA is
  sort Elt to Tags .
endv


fmod PURPOSE-SET is
  protecting DATA .
  protecting SET{Purpose} * (sort NeSet{Purpose} to NePurposeSet,
                         sort Set{Purpose} to PurposeSet) .

subsort Purpose < NePurposeSet < PurposeSet .

endfm

fmod ACTION-SET is
  protecting DATA .
  protecting SET{Action} * (sort NeSet{Action} to NeActionSet,
                         sort Set{Action} to ActionSet) .
  subsort Action < NeActionSet < ActionSet .

endfm

fmod ENTITY-SET is
  protecting DATA .
  protecting SET{Entity} * (sort NeSet{Entity} to NeEntitySet,
                         sort Set{Entity} to EntitySet) .
  subsort Entity < NeEntitySet < EntitySet .

endfm


***************************************************************************
***
*** Signature of programs and states.
***
***************************************************************************

*** The sort of a class identifier.
***
fmod PAOL-CID is
  protecting QID .
  sort Cid .
  subsort Qid < Cid .

  op Class : -> Cid [ctor] .
  op None : -> Cid [ctor] .
endfm

view Cid from TRIV to PAOL-CID is
  sort Elt to Cid .
endv

*** The sort of a Object identifier.
fmod PAOL-OID is
  protecting PAOL-CID .
  protecting NAT .
  protecting DATA .

  subsort Oid < Data .
--- Constructor of object names
  op ob : Cid Int -> Oid [ctor] .
endfm

view Oid from TRIV to PAOL-OID is
  sort Elt to Oid .
endv

*** The sort of a User identifier.
fmod PAOL-UID is
  protecting PAOL-CID .
  protecting NAT .
  protecting DATA .

  ***subsort Uid < Data . unsure cause its raising warning
--- Constructor of object names
  op UI : Int -> Uid [ctor] . ***could also be Nat here?
endfm

view Uid from TRIV to PAOL-UID is
  sort Elt to Uid .
endv

fmod UID-SET is
protecting PAOL-UID .
protecting SET{Uid} * (sort NeSet{Uid} to NeUidSet,
                         sort Set{Uid} to UidSet) .
  subsort Uid < NeUidSet < UidSet .

endfm


*** The sort of a Method identifier.

fmod PAOL-MID is
  protecting QID .

  sort Mid .
  subsort Qid < Mid .
endfm

*** The sort of a Label identifier for futures .

fmod PAOL-DATA-LABEL is

  extending DATA .
  protecting PAOL-OID .

  sort Label .
  subsort Label < Data .

  --- A label consists of the id of the sending object plus a unique number.
  op label : Oid Nat -> Label [ctor format (o o)] .
endfm

view Label from TRIV to PAOL-DATA-LABEL is
  sort Elt to Label .
endv

fmod PRIV_DATA is
  pr DATA .
  protecting PURPOSE-SET .
  protecting ACTION-SET .
  protecting ENTITY-SET .
  protecting UID-SET .
  subsort Policy < Data . *** dont do this yet, this is not correct cause policy just exists in configuration
  ***subsort Tag < Data .

  var U U1  : UidSet .
  var P P1  : PurposeSet .
  var E E1 : Expr .
  var D D1 : Data .
  var DL : DataList .
  var t t1 : Tags .
  vars tL tL1 : TagsList .
  vars NtL NtL1 : NeTagsList .
  op notags : -> TagsList [ctor] .
  ***op _+_ : TagsList TagsList -> TagsList [ctor assoc comm id: notags ] .
  op _+_ : TagsList TagsList -> TagsList [ctor assoc comm ] .
  op _+_ : NeTagsList  TagsList -> TagsList [ctor ditto] .
  op _+_ : TagsList  NeTagsList -> TagsList [ctor ditto] .
  op _+_ : NeTagsList  NeTagsList -> TagsList [ctor ditto] .

  op (_,_,_) : EntitySet ActionSet PurposeSet  -> Policy [ctor] .
  op tg : UidSet PurposeSet  -> Tags . ***should be vidlist? instead?
  op TaggedExp(_,_) : Expr Tags -> TaggedExpr .
  op Users(_) : TagsList -> UidSet .
  op Purposes(_) : TagsList -> PurposeSet .

***(the reduce output is here
  reduce in PRIV_DATA : Users(tg (U, P) + tg (U1 , P1) + tg (U2, P2)) .
  reduce in PRIV_DATA : Users((tg(U1, P1) + tg(U2, P2)) + tg(U, P)) .
  rewrites: 6 in 0ms cpu (0ms real) (6000000 rewrites/second)
  result UidSet: U, U1, U2, Users(notags) does not work for one more arg)

  eq Users (tg (U, P) + (tg (U1 , P1) + tL) ) = union ((U, U1) , Users(tL)) .
  eq Users (tg (U, P) + tL ) = union (U, Users(tL)) .
  eq Users(tg (U, P) + tg (U1 , P1)) = union(U, U1) .
  eq Users(tg (U, P))  = U .
  eq Users( notags) = empty .


  eq Purposes (tg (U, P) + (tg (U1 , P1) + tL) ) = intersection ((P, P1) , Purposes(tL)) .
  eq Purposes (tg (U, P) + tL ) = intersection (P, Purposes(tL)) .
  eq Purposes(tg (U, P) + tg (U1 , P1))  = union(P, P1) .
  eq Purposes(tg (U, P))  = P .
  eq Purposes(notags) = empty .

*** tag combinator
  op oplus : TagsList  -> Tags .
  eq oplus (tg (U, P) +  (tg (U1 , P1) + tL) ) = tg ( union((U, U1), Users(tL)) , intersection ((P, P1), Purposes(tL) )) .
  ceq oplus (tg (U, P) +  tL ) = tg (U, P)  if tL == notags .
  eq oplus (tg (U, P)) = tg (U, P) .

***not correct check again
  op getTags : DataList -> TagsList .
  eq getTags( TaggedExp(E,t),, (TaggedExp(E1, t1),,DL)) = t + t1 + getTags(DL) .
  eq getTags( TaggedExp(E,t),, DL) = t + getTags(DL) .
  ceq getTags( TaggedExp(E,t),, DL) = t if DL == emp .

  var NpD NpD' : NonPrivData . var PD PD' : PrivData .

  op _++_ : Data Data -> Data .
  eq TaggedExp(E,t) ++ E1 = TaggedExp( (E app E1), t) .
  eq E1 ++ TaggedExp(E,t) = TaggedExp( (E1 app E), t) .
  eq TaggedExp(E,t) ++ TaggedExp(E1,t1) = TaggedExp( (E app E1), oplus(t + t1)) . ***here chcek app again

  op _app_ : NonPrivData NonPrivData -> NonPrivData [ctor] .
  op _app_ : PrivData NonPrivData -> PrivData [ctor] .
  op _app_ : NonPrivData PrivData -> PrivData [ctor] .
  op _app_ : PrivData PrivData -> PrivData [ctor] .


  op _(_) : String ExprList -> Expr .
  *** function application
  ***helpers for function application
  op fparams : String -> VidList .
  op fdefn : String -> Expr .

endfm


*** Binding variables to values ***
***uses MAP from prelude
fmod PAOL-SUBST is
  protecting PRIV_DATA .
  extending MAP{Vid, Data} * (sort Map{Vid,Data} to SSubst,
                              sort Entry{Vid,Data} to Binding,
                              op empty : -> Map{Vid,Data} to noSubst,
                              op insert : Vid Data Map{Vid,Data} -> Map{Vid,Data} to $insert ) .

op dom : Vid Subst -> Bool .
op remove : Vid Subst -> Subst .
sort Subst .
subsort SSubst < Subst .
*** Non-comm composition operator for substitutions
vars V V' : Vid .
var VL : VidList .
var DL : DataList .
var D : Data .
vars S1 S2 : Subst .
var S3 : SSubst .

op _::_ : Subst Subst -> Subst [assoc] .
eq (S1 :: S2)[V] = if $hasMapping(S2, V) then S2[V] else S1[V] fi .

eq dom(V, noSubst) = false .
eq dom(V, ((V' |-> D), S1)) = if V == V' then true else dom(V, S1) fi .
eq dom(V, S1 :: S2) = dom(V, S1) or dom(V, S2) .

eq remove(V, (S1, V |-> D)) =  S1 .
eq remove(V, S1) =  S1 [owise] .


op hasMapping : Subst Vid -> Bool .
eq hasMapping(S2, V) = $hasMapping(S2, V) .
eq hasMapping(S1 :: S2, V) = $hasMapping(S2, V) or hasMapping(S1, V) .

op insert : Vid Data Subst -> Subst .
eq insert(V, D, S2) = $insert(V, D, S2) .
eq insert(V, D, S1 :: S2) = S1 :: $insert(V, D, S2) .

*** Replace an existing binding even in the middle of the SSubst stack.
op update : Vid Data Subst -> Subst .
eq update(V, D, S1 :: S2) = if $hasMapping(S2, V) then S1 :: $insert(V, D, S2)
    else update(V, D, S1) :: S2 fi .
ceq update(V, D, S2) = $insert(V, D, S2)
if $hasMapping(S2, V) .       *** Block if no mapping exists.

--- Create a substitution from a list of identifiers and data values.
op createSubst : VidList DataList -> SSubst .
eq createSubst(VL, DL) = $createSubst(noSubst, VL, DL) .
op $createSubst : SSubst VidList DataList -> SSubst .
***eq $createSubst(S2, noVid, emp) = S2 .
***eq $createSubst(S2, (V, VL), (D :: DL)) = $createSubst($insert(V, D, S2), VL, DL) .

endfm


fmod PAOL-EVAL is
protecting PAOL-SUBST .
protecting PRIV_DATA .
protecting LIST {Expr} * (sort LIST{Expr} to list) .
pr BOOL-OPS .

*** Evaluation of expressions
op eval	    : Expr Subst     -> Data .     *** evaluate expression
op eval	    : EmpList Subst  -> Data .     *** evaluate expression
op evalB    : Expr Subst     -> Bool .
op evalN    : Expr Subst     -> Nat .
op evalS    : Expr Subst     -> String .
op evalList : ExprList Subst -> DataList . *** maps list to values
op inList   : Data DataList -> Bool .

*** Variables
var E E' : Expr .     var EL : ExprList .     var D D' : Data .
var A : Vid .         var S : Subst .         var Q : Qid .
var I : Int .         var B : Bool .          var STR : String .
var DL : DataList .  var t t' : Tags .


op taggedVal : Val Tags -> TaggedVal .

op isVal : Expr Subst -> Bool .
op isTaggedVal : Expr Subst -> Bool .

eq eval(A, S) = S [A] . *** for variables
eq eval(D, S) = D . *** for values and expressions
ceq eval(TaggedExp(E,t) , S) = taggedVal(eval(E,S), t) if isVal(E, S) == true .
ceq eval(TaggedExp(E,t) , S) = taggedVal(eval(E,S), oplus (getTags(eval(E,S)) + t) ) if isTaggedVal(E, S) == true .

eq inList(D, emp) = false .
eq inList(D, D') = D == D' .
eq inList(D, (D',, DL)) = if (D == D') then true else inList(D, (DL)) fi .

eq evalN(E,S) = eval(E,S) asNat .                  *** expressions
eq evalB(E,S) = eval(E,S) asBool .                 *** expressions
eq evalS(E,S) = eval(E,S) asStr .                  *** expressions
eq eval (emp, S)= emp .


endfm

***(fmod PAOL-DATA-VIDLIST is
  protecting LIST{Vid} * (sort List{Vid} to VidList,
                          sort NeList{Vid} to NeVidList,
                          op nil : -> List{Vid} to noVid,
                          op __ : List{Vid} List{Vid} -> List{Vid} to _`,_ [format (d r os d)]) .
endfm)


fmod CONSENT is
protecting PRIV_DATA .
protecting SET{Policy} * (sort NeSet{Policy} to NeSetPl,
                            sort Set{Policy} to SetPl) .

sort Consent NeConsentSet ConsentSet .
subsort Consent < NeConsentSet < ConsentSet .

op (_->_) : Uid SetPl ->  Consent [ctor ] . ***here policyset is given for mapping
op none : -> ConsentSet [ctor] . *** Empty multiset
op _,_ : ConsentSet ConsentSet -> ConsentSet [ctor assoc comm id: none] .
op _,_ : NeConsentSet NeConsentSet -> NeConsentSet [ctor assoc comm id: none] .
op deleteC : Consent ConsentSet -> ConsentSet . *** Remove ONE occurrence
op _in_ : Consent ConsentSet -> Bool . *** Is element in multiset?
var C : Consent . var CnSet : ConsentSet .
eq deleteC(C , (C,CnSet)) = deleteC(C , CnSet) .
eq deleteC(C, CnSet) = CnSet [owise] .
eq C in (C , CnSet) = true .
eq C in CnSet = false [owise] .
op insertC : Consent ConsentSet -> ConsentSet .
eq insertC(C , CnSet) = C , CnSet .
endfm

view Consent from TRIV to CONSENT is
  sort Elt to Consent .
endv





fmod PAOL-STATEMENTS is
protecting PAOL-DATA-LABEL .
protecting PAOL-SUBST .
protecting PAOL-CID .
protecting PAOL-MID .
protecting CONSENT .
sorts Stm .

op skip : -> Stm [ctor] .
op assign(_;_) : Vid Data -> Stm [ctor] .
op assign(_;_) : VidList DataList -> Stm [ctor] .
op assign(_;_) : VidList Stm -> Stm [ctor] .
op new(_;_;_;_) : Vid Cid DataList Entity -> Stm [ctor] .
op _:= NewUser : Vid  -> Stm [ctor] . *** can be created just like future in the configuration
op get(_;_) : Vid Vid  -> Stm [ctor] .
op get(_;_) : Label Vid -> Stm [ctor] .
op asyncall!(_;_;_;_) : Vid Data Mid DataList -> Stm [ctor] . *** async call with !
op asyncall!!(_;_;_;_) : Vid Data Mid DataList -> Stm [ctor] . *** async call with !!

***Privacy statements
op _.addCon(_) : Data Policy -> Stm [ctor] .
op _.remCon(_) : Data Policy -> Stm [ctor] .
***
op return(_) : Data -> Stm [ctor] .
op end : -> Stm .

***check later stmts
op call(_;_;_;_) : Label Oid Mid DataList -> Stm [ctor] .
op mark(_) : Expr -> Stm [ctor] .
op release(_) : Expr -> Stm [ctor] .

op _:::=_  : VidList DataList -> Stm [ctor] .

***removed form latest syntax
***op _.addInst(_) : Expr Oid -> Stm [ctor] . ***notsure if oid or expr
***op _.remInst(_) : Expr Oid -> Stm [ctor] . ***notsure if oid or expr
***op await_ : Expr -> Stm [ctor] .
***op tag(_;_) : Expr Tags -> PrivData [ctor] .
***op addtag( _;_) : Vid PrivData -> Stm [ctor] .

endfm

view Stm from TRIV to PAOL-STATEMENTS is
   sort Elt to Stm .
endv

fmod STM-LIST is
pr PAOL-STATEMENTS .
pr PAOL-SUBST .
protecting LIST{Stm} * (sort List{Stm} to StmList,
                        sort NeList{Stm} to NeStmList,
                        op nil : -> List{Stm} to noStm,
                        op __ : List{Stm} List{Stm} -> List{Stm} to _;_  ) .
op if(_){_} : Expr StmList -> Stm [ctor] .
var V : Vid .
var D : Data .
var DL : DataList .
eq assign(V ; emp)  = skip . *** Note that skip takes a step
eq assign(emp ; DL)   = skip . ***is it DL or D chcek assignment
endfm



fmod PAOL-PROCESS is
pr STM-LIST .

sorts Process NeMProc MProc RunStat .
var L : Subst .
var st : Stm .
var SL : StmList .
var eta : Entity .


subsort Process < MProc .
op idle : -> Process [ctor format (!b o )] .
op noProc : -> MProc [ctor] .

op _,_ : MProc MProc -> MProc [ctor assoc comm id: noProc prec 41 format (d r osni d) ] .
op {_} : StmList  -> RunStat .
***op {_,_} : StmList Entity -> RunStat .
op _|_  : Subst RunStat  -> Process [ctor ] .
***op {_|_}(_) : Subst StmList Entity -> Process [ctor ] .

eq L | { noStm } = idle .
op _+_ : Process Stm -> Process . *** why this?

***eq (L | SL } st) = ({L | SL ; st}(eta)) . not sure of this

***eq {L | noStm }(eta) = idle .
***eq ({L | SL }(eta) + st) = ({L | SL ; st}(eta)) .

endfm





fmod PAOL-METHOD is
  protecting STM-LIST .
  protecting PAOL-MID .
  sort Method .
  op <_: Method | Param:_, Latt:_, Code:_> :
    Mid VidList Subst StmList -> Method [ctor format (nib ! ob o d sb o d sb o d sb o b o)] .

    op noMtd : -> Method [ctor] .


endfm

view Method from TRIV to PAOL-METHOD is
  sort Elt to Method .
endv


fmod CLASS is
  protecting STM-LIST .
  protecting PAOL-CID .
  protecting PAOL-PROCESS .
  protecting SET{Method} * (sort Set{Method} to MMtd,
                            op empty : -> Set{Method} to noMethod) .
  protecting SET{String} * (sort Set{String} to StringSet) .

  var C : Cid .
  var MM : MMtd .
  var AL : VidList .
  vars L S S1 : Subst .
  vars N F F' : Nat .
  sorts   Class .
  sorts Inh InhList . *** inheritance list for superclass can be removed later
  subsorts Inh < Data .
  subsorts Inh < InhList .


op  _<_> : Cid DataList -> Inh .     *** initialised superclass
op noInh : -> InhList [ctor] .
op  _##_   : InhList InhList -> InhList [ctor assoc id: noInh] .
op str(_) : Cid -> Data .

  var Ih : Inh .
  var IL : InhList .
  var SL : StmList .
  vars Q Q' : Qid .
  var DL : DataList .
  var O : Oid .
  var E : Entity .

eq  Ih ## IL ## Ih = Ih ## IL .

  --- Class declaration.
      op <_: Cl | Inh:_, Par:_, Att:_, Mtds:_, Ocnt:_> :
      Cid InhList VidList Subst MMtd Nat -> Class
    [format (b! b o o o b o o  b o o  b o o  b on o  b o  b! on )] .

  op emptyClass : -> Class .
  eq emptyClass = < 'noClass : Cl | Inh: noInh, Par: emp, Att: noSubst, Mtds: noMethod, Ocnt: 0 > .


  *** Class/method functions ***
  op get : Qid MMtd Oid Nat DataList  -> Process .  *** fetches pair (code, vars) add entity here instead of contract here
  op _in_ : Qid MMtd -> Bool .  *** checks if Q is a declared
  *** method in the method multiset
  *** param is vidlist here not datalist
  eq Q in noMethod = false .
  eq Q in (< Q' : Method | Param: AL, Latt: S, Code: SL > , MM) = if (Q == Q') then true else (Q in MM) fi .

  *** bind call to process
  eq get(Q, noMethod, O, N, DL ) = noProc .
  eq get(Q, (< Q' : Method | Param: AL, Latt: S, Code: SL > , MM), O, N, DL) =  if Q == Q'
  then (insert('caller, O, S)| {(AL :::= DL) ; SL} ) else get(Q, MM, O, N, DL) fi . ***here i can pass the subst for entity if needed


endfm


fmod OBJECT is
protecting CLASS .
pr PAOL-PROCESS .
sort Object .

var C : Cid .
var O O' : Oid .
var MM : MMtd .
var q : MProc .
var AL : VidList .
vars L S S1 : Subst .
vars F F' : Nat .
vars P P' : Process .
var eta eta' : Entity .

  --- Oid: object ID
  --- Cid: class ID
  --- Subst: fields
  --- Nat: counter for generating unique future labels
  ----Ent: Entity of the object
  ---prQ: Process queue
  op <_:Ob | Class:_ | Att:_, Pr:_, Lcnt:_, Ent:_ > : Oid Cid Subst Process Nat Entity  -> Object [ctor ] . *** removed process que?


  op noObj : -> Object [ctor] .

  op getClass : Object -> Cid .
  eq getClass(< O :Ob | Class: C | Att: L , Pr: P, Lcnt: F, Ent: eta >) = C .

endfm


mod PAOL-COMMUNICATION is
  protecting OBJECT .
  protecting PRIV_DATA .
  protecting PAOL-PROCESS .
  protecting PAOL-OID .
  protecting PAOL-CID .
  protecting PAOL-MID .
  protecting CLASS .
  protecting SET{Method} * (sort Set{Method} to MMtd,
                            op empty : -> Set{Method} to noMethod) .
  protecting SET{String} * (sort Set{String} to StringSet) .

  --- Define object identifiers.
  sorts Event Body Msg MMsg Kid Queue .
  subsort Body < MMsg .
  op noMsg : -> Body [ctor] .
  op _+_ : MMsg MMsg -> MMsg [ctor assoc comm id: noMsg] .

  vars B M : String .
  var C : Cid .
  vars O O' : Oid .
  vars L S S1 : Subst .
  vars P P' : Process .
  vars MS MS1 : MMtd .
  var W : MProc .
  var AL : VidList .
  vars SL SL1 : StmList .
  var EL : ExprList .
  var D : Data .
  var DL : DataList .
  vars F F' : Nat .

  op invoc : Oid Nat Mid DataList Entity -> Body [ctor] . ***removed format here
  op comp : Oid DataList -> Msg [ctor] . *** completion
  op n(_,_) : MsgId Process -> Msg  .      *** completion
  --- Process creation in target object:
  --- M: the method.
  --- N: the future (label).
  --- DL: the parameters (already evaluated by the caller).

  op _to_ : Body Oid -> Msg [ctor format (o  ! o on)] .
  op _from_to_ : Body Oid Oid -> Msg [ctor format (o ! o ! o on)] .
  op bindMtd : Oid Oid Nat Qid DataList InhList Entity  -> Msg [ctor] .
   *** ok until here

*** Bind method request
*** Given: caller callee method params (list of classes to look in)
op boundMtd(_,_) : Oid Process -> Msg
    [ctor format (!r r o o o !r on)] . *** binding result
*** CONSIDER the call O.Q(I). bindMtd(O,Q,I,C S). Try to find Q in
*** class C or superclasses, then in S. boundMtd(O,Mt) is the result.


var A : Vid .
var Q : Qid .
var N : Nat .
op newId : Cid Nat -> Oid .
***eq newId(Q, N)  = ob(qid(string(Q) + string(N,10))) . ***check this for new object id creation
op newN : Nat Oid -> MsgId .
eq newN(N, O) = n(N, O ) .

endm

view Msg from TRIV to PAOL-COMMUNICATION is
  sort Elt to Msg .
endv



mod PAOL-CONFIGURATION is
  protecting PAOL-COMMUNICATION .
  sort NConfiguration Configuration  .
  subsorts Object Msg ConsentSet Class < NConfiguration .
  op noConf : -> NConfiguration [ctor] .
  op __ : NConfiguration NConfiguration -> NConfiguration [ctor config assoc comm id: noConf] .
  op main{_,_}_ : Subst StmList NConfiguration -> Configuration .
  op { _ } : NConfiguration -> Configuration .
  var C : Cid .
  var E : ExprList .
  var SL : StmList .
  var L : Subst .
  var MC : NConfiguration .
  eq main { L, SL } MC = { < obj('main) :Ob | Class: 'class | Att: ('this |-> obj('main) ), Pr: L | { SL}, Lcnt: 0, Ent: noent >  MC } .

endm



***THE MACHINE***

mod INTERPRETER is
  pr PAOL-EVAL .
  protecting CONSENT .
  pr PAOL-COMMUNICATION .
  pr PAOL-CONFIGURATION .
  pr PAOL-METHOD .

vars O O' O'' : Oid .      vars C C' : Cid .
vars V V' V'' : Vid .      var VL : VidList .
vars E E' : Expr .     vars EL  : ExprList .
var D D' : Data . var DL DL1 DL2 : DataList .
var ST : Stm .         vars SL SL' SL'' : StmList . vars SL1 SL2 : NeStmList .
var P : Process .
vars S S' L L' DB DB' : Subst .
vars I I' : InhList .
vars N  N' G : Nat .
vars Tg Tg' : Tags .
vars eta_0 eta eta' eta'' : Entity .
var Pr : Purpose .
var PrSet PrSet' : PurposeSet .
var Ac : Action .
var AcSet : ActionSet .
vars U  U1  U2 : Uid .
var ES : EntitySet .
var MS : MMtd .
var q : MProc .
***var NS : NatS .
var US US2 : UidSet .
***var MM : MMsg .
var M : Mid .
var K : String .
var F F' : Nat .
var Q : Qid .
var B B' : Bool .
var T : Nat .
vars Cn Cn' : Consent .
vars CnSet CnSet'  : ConsentSet .
var Cfg : Configuration .
var NsD NsD' : Data .
var STRING : String .
var MSG : Msg  .
var POLICY : Policy .
var PSet : SetPl .
var OSet : OidSet .
var Ev : Event .




***Skip

rl
  < O :Ob | Class: C | Att: S, Pr:  L | { skip ; SL }, Lcnt: N, Ent: eta >
  =>
  < O :Ob | Class: C | Att: S, Pr:  L | { SL }, Lcnt: N, Ent: eta  >
[label skip] .

***local assignment

rl [assign-local] :
< O :Ob | Class: C | Att: S, Pr:  L | { assign( V ; D ) ; SL }, Lcnt: N, Ent: eta >

=>
< O :Ob | Class: C | Att: S, Pr:  insert(V, eval(D ,(S :: L)), L) | { SL }, Lcnt: N, Ent: eta >
[label assign-local] .
***field assignment

crl [assign-field] :

< O :Ob | Class: C | Att: S, Pr:  L | { assign( V ; D ) ; SL }, Lcnt: N, Ent: eta >

=>
< O :Ob | Class: C | Att:(insert(V, eval(D, S), S)) , Pr:  L | { SL }, Lcnt: N, Ent: eta >
if  (dom(V,S) == true)
[label assign-field ] .


***new object creation


rl [new-object] :
< O :Ob | Class: C | Att: S, Pr:  L | { new( V ; C' ; DL ; eta'' ) ; SL }, Lcnt: N, Ent: eta >
< C' : Cl | Inh: I , Par: VL, Att: S' , Mtds: MS , Ocnt: F >
  =>
< O :Ob | Class: C | Att: S, Pr: L | { assign( V ; newId(C', F) ) ; SL } , Lcnt: N, Ent: eta  >
< C' : Cl | Inh: I , Par: VL, Att: S' , Mtds: MS , Ocnt: (F + 1) >
< newId(C',F) :Ob | Class: C' | Att: noSubst , Pr: idle , Lcnt: 1, Ent: eta'' >  .
 *** findAttr(newId(C',F), I, (insert('purpose, str(C'), insert('myContract, contract(str(C'), newId(C',F)), S'))), (AL ::= evalList(EL, (S # L)))) .

*** ATTRIBUTE inheritance with multiple inheritance
*** CMC assumes that all attributes names are (globally) different

op findAttr  : Oid InhList Subst StmList  -> Msg [ctor] . *** collect attributes
op foundAttr : Oid Subst StmList         -> Msg [ctor] . *** resulting Subst
*** look in InhList, collect attributes in Subst, give result to Oid

eq findAttr(O, noInh, S, SL)  = foundAttr(O, S, SL) .

eq findAttr(O,((C < DL >) ## I),S, SL)
< C : Cl | Inh: I', Par: VL, Att: L, Mtds: MS, Ocnt: F >
 = findAttr(O, I ## I',(L :: S), SL ; assign(VL ; DL))
   < C : Cl | Inh: I', Par: VL, Att: L, Mtds: MS, Ocnt: F > .

eq foundAttr(O, S', SL)
< O :Ob | Class: C | Att: S, Pr: idle , Lcnt: N, Ent: eta  >
 = < O :Ob | Class: C | Att: ('this |-> O, S'), Pr: noSubst | {SL} , Lcnt: N, Ent: eta  > .


 rl
   < O :Ob | Class: C | Att: S, Pr:  L | { skip ; SL }, Lcnt: N, Ent: eta >
   =>
   < O :Ob | Class: C | Att: S, Pr:  L | { SL }, Lcnt: N, Ent: eta  >
 [label skip] .

 rl [receive-call-req] :
 < O : C | Att: S, Pr: P, Lcnt: N, Db: DB >
 ruleLabel(O', Ev) (invoc(O', F, Q, DL, Cn) from O' to O )
 =>
 < O : C | Att: S, Pr: P, Lcnt: N, Db: DB >
 ruleLabel(O, otherEv)
  bindMtd(O, O', F, Q, DL, C < emp >,  Cn) .


endm

***(
mod PAOL-EVAL is
protecting PRIV_DATA .
protecting PAOL-SUBST .
protecting COUNTER .
protecting RANDOM .
protecting PAOL-CONFIGURATION .


*** Variables
var F  :  Label .
vars E E' E'' : Expr .
vars D D' : Data .
vars DL DL1 DL2 DL3 : DataList .
vars NPd NPd' : NonPrivData .
vars Pd Pd' : PrivData .
vars EL : ExprList .
var NeEl : NeExprList .
vars V V' : Vid .
var VL : VidList .
vars Q  : String .
vars Q1 Q2 : String .
vars eta eta' : Entity .
var QID : Qid .
var M : Mid .
vars Us Us' : UidSet .
vars Ps Ps' : PurposeSet .
vars S S' L L' : Subst .
vars St St1 : Stm .
vars SL SL1 Sl2 : StmList .
var CN : Configuration .
var OB : Object .
var O O' : Oid .
var FS : FutureStatus .
vars N N1 N2 : Nat .
var MS : Msg .
var W : MProc .
var P : Process .
vars C C' : Cid .
var SS : SSubst .
var MIS : MMtd .
vars t t' : Tags .
var I : Int .
var B : Bool .

  --- Check if a message is in the queue.
  op completed : Label Configuration -> Bool .
  eq completed(F, future(F, M, FS, N, D) CN ) =
    FS == Completed or FS == Error . --- error here
  eq completed(F, CN) = false [owise] .
op noVid : -> Vid .
op eval : Expr Subst  Configuration -> Data .
op evalList : ExprList Subst Configuration -> DataList .
op executable : StmList Subst Configuration -> Bool .
op schedulable : StmList Subst Configuration -> Bool .
op _+_ : Data Data -> Data .
op evalB    : Expr Subst Configuration    -> Bool .
op evalN    : Expr Subst Configuration  -> Nat .
op evalS    : Expr Subst Configuration   -> String .




eq eval(V, S, CN) = S[V] .
eq eval(Pd, S, CN) = Pd .
eq eval(NPd, S, CN) = NPd .
eq eval(D, S, CN) = D .
*** Normal variable lookup.  Can be either instance or local variable.
eq eval (QID ,S , CN) = S[QID] .
eq eval(@ QID, (SS :: S), CN) =  SS [QID] .

eq eval(Q(EL), S, CN) = eval(fdefn(Q),createSubst(fparams(Q), evalList(EL, S, CN)), CN) .
eq eval(Q [EL], S, CN) = Q [evalList(EL, S, CN) ] .
eq eval(Q [EL], S, CN) = Q [evalList(EL, S, CN ) ] .
eq eval(?(QID), S, CN) = completed(S[QID], CN) asPaolBool .
eq eval(?(@ QID), (SS :: S), CN) = completed(SS[QID], CN) asPaolBool .
eq eval(?(F), S, CN) = completed(F, CN) asPaolBool .
***eq eval(if(E){ E'}, S, CN) = if (eval(E, S, CN) asBool) {eval(E', S, CN)}  .


--- Evaluate lists of expressions.
eq evalList(emp, S, CN) = emp .
eq evalList(noVid, S, CN) = emp .
eq evalList(DL, S, CN) = DL .
eq evalList(E, S, CN) = eval(E, S, CN) .
eq evalList(E ,, EL, S, CN) =
  eval(E, S, CN) ,, evalList(EL, S, CN) .


eq executable(await E ; SL, S, CN) = eval(E, S, CN) asBool .
eq executable(SL, S, CN) = true [owise] .
--- The schedulable predicate holds, if a statement is schedulable for
--- execution, i.e., the corresponding process may be woken up.
eq schedulable(get(QID ; V') ; SL , S, CN) = completed(S[QID], CN) .
eq schedulable(get(@ QID ; V') ; SL , (SS :: S), CN) = completed(SS[QID], CN) .
eq schedulable(get(F ; V') ; SL , S, CN) = completed(F, CN) .
eq schedulable(SL, S, CN) = executable(SL, S, CN) [owise] .


eq TaggedExp(NPd , tg(Us, Ps)) + TaggedExp (NPd' , tg(Us', Ps')) = TaggedExp( (NPd appen NPd'), tg( union(Us,Us'), intersection(Ps,Ps'))) .
eq TaggedExp( NPd , tg(Us, Ps) ) + NPd' = TaggedExp( (NPd appen NPd'), tg(Us, Ps) ) .
eq NPd' + TaggedExp( NPd , tg(Us, Ps) ) = TaggedExp( (NPd appen NPd') , tg(Us, Ps) ) .
eq NPd + NPd' = NPd appen NPd' .

eq evalN(E,S,CN) = eval(E,S, CN ) asNat .                  *** expressions
eq evalB(E,S,CN) = eval(E,S, CN) asBool .                 *** expressions
eq evalS(E,S,CN) = eval(E,S,CN) asStr .                  *** expressions
eq eval (emp, S, CN)= emp .
eq evalList(emp, S, CN)  = eval(emp, S, CN) .





  op markFutures : DataList -> StmList .
  ceq markFutures(D) = mark(D) if D : Label .
  eq markFutures(Q[DL] ) = markFutures(DL) .
  eq markFutures(D) = noStm [owise] .
  ceq markFutures(D ,, DL) = markFutures(D) ; markFutures(DL)
  if DL =/= emp .
  eq markFutures(emp) = noStm .

  op freeFutures : DataList -> StmList .
  ceq freeFutures(D) = release(D) if D : Label .
  eq freeFutures(Q[DL]) = freeFutures(DL) .
  eq freeFutures(D) = noStm [owise] .
  ceq freeFutures(D ,, DL) = freeFutures(D) ; freeFutures(DL)
  if DL =/= emp .
  eq freeFutures(emp) = noStm .

  op freeFutures : SSubst -> StmList .
  eq freeFutures(noSubst) = noStm .
  eq freeFutures((V |-> D, SS)) = freeFutures(D) ; freeFutures(SS) .
  op freeFutures : Subst -> StmList .
  eq freeFutures(S :: SS) = freeFutures(SS) ; freeFutures(S) .

***kill process here?

***Filter a process list and return the ones that are schedulable.  Second
*** argument is a list of objects referenced from the processes, third one
*** the configuration (for checking status of futures).  Fourth argument is
*** auxiliary values for eval.
***(
op getSchedulableProcesses : MProc Configuration  -> MProc .
op getSchedulableProcesses : MProc Configuration  -> MProc .
eq getSchedulableProcesses(noProc, CN) = noProc .
ceq getSchedulableProcesses(({ S' | SL }, W), < O :Ob | Class: C | Att: S, Pr: { L | SL }(eta'), Lcnt: N, Ent: eta, PrQ: W > CN) =
  if schedulable(SL, (S :: S'), object(O, C:Cid, S, N, LIVE) CN, (MAC, '.deadline |-> S'['.deadline]))
  then { S' | SL }, getSchedulableProcesses(W, object(O, C:Cid, S, N, LIVE) OBJS, CN, MAC)
  else getSchedulableProcesses(W, object(O, C:Cid, S, N, LIVE) OBJS, CN, MAC)
  fi
if O := S'['this] .)


--- message generation
eq
< O :Ob | Class: C | Att: S, Pr: { L | call(F ; O' ; M ; DL ) ; SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
 =
< O :Ob | Class: C | Att: S, Pr: { L | markFutures(DL) ; SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
  invoc(O, F, M, DL, eta')
  [label call-internal] .

eq
< O :Ob | Class: C | Att: S, Pr: P , Lcnt: N, Ent: eta, PrQ: W >
< C : Cl | Par: VL, Att: S' , Mtds: (MIS, < M : Method | Param: VL , Latt: S , Code: SL >) , Ocnt: N >
  invoc(O, F, M, DL, eta')
  =
< O :Ob | Class: C | Att: S, Pr: P , Lcnt: N, Ent: eta, PrQ: (W, makeProcess(< M : Method | Param: VL, Latt: S, Code: SL >, F, DL, eta )) >
< C : Cl | Par: VL, Att: S' , Mtds: (MIS, < M : Method | Param: VL , Latt: S , Code: SL >) , Ocnt: N >
    [label transport-imsg] .

    --- mark
    ---
    --- Mark a label in use.  We don't bother to make this a rule until we need
    --- it.
ceq
< O :Ob | Class: C | Att: S, Pr: { L | mark(E);  SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
future(F, M, FS, N1, D)
  =
future(F, M, FS, N1 + 1, D)
< O :Ob | Class: C | Att: S, Pr: { L | SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
if F == eval(E, (S :: L), none)
    [label mark] .


    --- free
    ---
    --- Free a Future.
    ---
    ceq
    < O :Ob | Class: C | Att: S, Pr: { L | release(E);  SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
    future(F, M, FS, N1, D)
    =
    future(F, M, FS, if N1 == 0 then 0 else sd(N, 1) fi, D)
    < O :Ob | Class: C | Att: S, Pr: { L | release(E);  SL }(eta'), Lcnt: N, Ent: eta, PrQ: W >
    if F == eval(E, (S :: L), none) /\ (L == noSubst or-else O == L['this])
        [label free] .



endm
)
